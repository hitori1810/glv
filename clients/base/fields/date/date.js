/*********************************************************************************
 * By installing or using this file, you are confirming on behalf of the entity
 * subscribed to the SugarCRM Inc. product ("Company") that Company is bound by
 * the SugarCRM Inc. Master Subscription Agreement (“MSA”), which is viewable at:
 * http://www.sugarcrm.com/master-subscription-agreement
 *
 * If Company is not bound by the MSA, then by installing or using this file
 * you are agreeing unconditionally that Company will be bound by the MSA and
 * certifying that you have authority to bind Company accordingly.
 *
 * Copyright (C) 2004-2013 SugarCRM Inc.  All rights reserved.
 ********************************************************************************/
({datepickerVisible:false,dateValue:'',serverDateFormat:'Y-m-d',stripIsoTZ:true,initialize:function(options){this.userTimePrefs=app.user.getPreference('timepref');this.usersDatePrefs=app.user.getPreference('datepref');if(!_.isUndefined(this.showAmPm)){this.showAmPm=this.userTimePrefs.match(/[aA]$/)==null?true:false;}
app.view.Field.prototype.initialize.call(this,options);},bindDomChange:function(){},_presetDateValues:function(){this.dateValue=this.$('.datepicker').val();this.dateValue=(this.dateValue)?this.dateValue:'';if(!_.isUndefined(this._setTimeValue)&&_.isFunction(this._setTimeValue)){this._setTimeValue();}},_setupDatepicker:function(){this.datepickerMap=this._patchDatepickerMeta();this.$(".datepicker").attr('placeholder',app.date.toDatepickerFormat(this.usersDatePrefs));this.$(".datepicker").datepicker({languageDictionary:this.datepickerMap,format:(this.usersDatePrefs)?app.date.toDatepickerFormat(this.usersDatePrefs):'mm-dd-yyyy'});this.$(".datepicker").datepicker().on({show:_.bind(this.showDatepicker,this),hide:_.bind(this.hideDatepicker,this)});},showDatepicker:function(ev){this.datepickerVisible=true;},hideDatepicker:function(ev){var model=this.model,fieldName=this.name,timeValue='',hrsMins={},dateValue='',$timepicker;this.datepickerVisible=false;model=this.model;fieldName=this.name;if(!_.isUndefined(this._setTimepickerValue)&&_.isFunction(this._setTimepickerValue)){$timepicker=this.$('.ui-timepicker-input');hrsMins=this._getHoursMinutes($timepicker);this._setTimepickerValue($timepicker,hrsMins.hours,hrsMins.minutes);}else{hrsMins={hours:'00',minutes:'00'};}
dateValue=this._getDatepickerValue();if(this._verifyDateString(dateValue)){model.set(fieldName,this._buildUnformatted(dateValue,hrsMins.hours,hrsMins.minutes),{silent:true});}else{model.set(fieldName,dateValue,hrsMins.hours,hrsMins.minutes,{silent:true});}},_verifyDateString:function(value){var dateFormat=(this.usersDatePrefs)?app.date.toDatepickerFormat(this.usersDatePrefs):'mm-dd-yyyy';if(_.isNaN(Date.parse(value))){return $.prototype.DateVerifier(value,dateFormat);}
return true;},_buildUnformatted:function(d,h,m){var parsedDate=app.date.parse(d,this.usersDatePrefs);d=app.date.format(parsedDate,this.serverDateFormat);return this.unformat(d+' '+h+':'+m+':00');},_getDatepickerValue:function(){var date=this.$('input.datepicker'),dateValue;dateValue=this._getTodayDateStringIfNoDate(date.prop('value'));this.dateValue=dateValue;return dateValue;},_setDatepickerValue:function(dateValue){var date=this.$('input.datepicker');dateValue=this._getTodayDateStringIfNoDate(dateValue);date.prop('value',dateValue);},_setServerDateString:function(jsDate,forceToDate){var h,m,d;d=app.date.format(jsDate,this.serverDateFormat);if(forceToDate){return d;}
if(this.stripIsoTZ){d=app.date.format(jsDate,this.serverDateFormat);h=this._forceTwoDigits(jsDate.getHours().toString());m=this._forceTwoDigits(jsDate.getMinutes().toString());return d+'T'+h+':'+m+':00';}
if(_.isFunction(jsDate.toISOString)){return jsDate.toISOString();}
return jsDate;},_getTodayDateStringIfNoDate:function(dateStringToCheck){if(!dateStringToCheck){var d=new Date();return app.date.format(d,this.usersDatePrefs);}
return dateStringToCheck;},_getViewName:function(){return this.view.meta&&this.view.meta.type?this.view.meta.type:this.view.name;},_isEditView:function(viewName){if(this.options.def.view==='edit'||this.options.viewName==='edit'||viewName==='edit'){return true;}
return false;},_patchDatepickerMeta:function(){var pickerMap=[],pickerMapKey,calMapIndex,mapLen,domCalKey,calProp,appListStrings,calendarPropsMap,i,filterIterator;appListStrings=app.metadata.getStrings('app_list_strings');filterIterator=function(v,k,l){return v!=="";};calendarPropsMap=['dom_cal_day_long','dom_cal_day_short','dom_cal_month_long','dom_cal_month_short'];for(calMapIndex=0,mapLen=calendarPropsMap.length;calMapIndex<mapLen;calMapIndex++){domCalKey=calendarPropsMap[calMapIndex];calProp=appListStrings[domCalKey];if(!_.isUndefined(calProp)&&!_.isNull(calProp)){calProp=_.filter(calProp,filterIterator);calProp.push(calProp[0]);}
switch(calMapIndex){case 0:pickerMapKey='day';break;case 1:pickerMapKey='daysShort';break;case 2:pickerMapKey='months';break;case 3:pickerMapKey='monthsShort';break;}
pickerMap[pickerMapKey]=calProp;}
pickerMap['daysMin']=_.map(pickerMap.daysShort,function(day){return(day.length>1)?day.substr(0,2):day;});return pickerMap;},_isNewEditViewWithNoValue:function(value){return(this.model.isNew()&&!value&&this._isEditView(this._getViewName()));},_forceTwoDigits:function(numstr){return numstr.length===1?'0'+numstr:numstr;},_render:function(value){var self=this,viewName;self._presetDateValues();app.view.Field.prototype._render.call(this);viewName=self._getViewName();$(function(){if(self._isEditView(viewName)){self._setupDatepicker();}});},format:function(value){var jsDate,parts;if(this._isNewEditViewWithNoValue(value)){jsDate=this._setDateIfDefaultValue();if(!jsDate){return value;}
value=app.date.format(jsDate,this.usersDatePrefs);}else if(!value){return value;}else{parts=value.match(/(\d+)/g);if(parts&&parts.length>2){jsDate=new Date(parts[0],parts[1]-1,parts[2]);value=app.date.format(jsDate,this.usersDatePrefs);}else{return value;}}
this.dateValue=value;this.$(".datepicker").datepicker('update',this.dateValue);jsDate=app.date.parse(value);return app.date.format(jsDate,this.usersDatePrefs);},unformat:function(value){var jsDate=new Date(value);if(!jsDate||jsDate.toString()==='Invalid Date'){jsDate=new Date(value.replace(/[\.\-]/g,'/'));}
return app.date.format(jsDate,this.serverDateFormat);},_setDateIfDefaultValue:function(){var value,jsDate;if(this.def.display_default){jsDate=app.date.parseDisplayDefault(this.def.display_default);this.model.set(this.name,app.date.format(jsDate,this.serverDateFormat));}else{return null;}
return jsDate;}})