<?php
if(!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point');

$dictionary['Contract'] = array(
    'table' => 'contracts',
    'audited' => true,
    'unified_search' => true,
    'comment' => 'A contract collects information about important legal and contractural obligations',
    'fields' => array (
        'name' => array (
            'name' => 'name',
            'vname' => 'LBL_CONTRACT_NAME',
            'dbType' => 'varchar',
            'type' => 'name',
            'len' => '255',
            'required' => true,
            'comment' => 'The name of the contract',
            'importable' => 'required',
            'unified_search' => true,
        ),
        'reference_code' => array (
            'name' => 'reference_code',
            'vname' => 'LBL_REFERENCE_CODE',
            'type' => 'varchar',
            'len' => '255',
            'required' => false,
            'comment' => 'The reference code used by the organization to refer to this contract'
        ),
        'quotes' => array (
            'name' => 'quotes',
            'type' => 'link',
            'vname' => 'LBL_QUOTES',
            'relationship' => 'contracts_quotes',
            'link_type' => 'one',
            'source' => 'non-db',
        ),
        'products' => array (
            'name' => 'products',
            'type' => 'link',
            'vname' => 'LBL_PRODUCTS',
            'relationship' => 'contracts_products',
            'link_type' => 'one',
            'source' => 'non-db',
        ),
        'opportunities' => array (
            'name' => 'opportunities',
            'type' => 'link',
            'vname' => 'LBL_OPPORTUNITY',
            'relationship' => 'contracts_opportunities',
            'link_type' => 'one',
            'source' => 'non-db',
        ),
        'opportunity_name' => array (
            'name' => 'opportunity_name',
            'rname' => 'name',
            'id_name' => 'opportunity_id',
            'vname' => 'LBL_OPPORTUNITY_NAME',
            'type' => 'relate',
            'table' => 'opportunities',
            'isnull' => 'true',
            'module' => 'Opportunities',
            'dbType' => 'varchar',
            'link' => 'opportunities',
            'len' => '255',
            'source' => 'non-db',
            'massupdate' => false,
            'unified_search' => true,
        ),
        'opportunity_id' => array(
            'name'=>'opportunity_id',
            'type'=>'id',
            'vname'=>'LBL_OPPORTUNITY_NAME',
            'source'=>'non-db',
        ),
        'account_name' => array (
            'name' => 'account_name',
            'rname' => 'name',
            'id_name' => 'account_id',
            'vname' => 'LBL_ACCOUNT_NAME',
            'type' => 'relate',
            'table' => 'accounts',
            'isnull' => 'true',
            'join_name'=>'accounts',
            'module' => 'Accounts',
            'dbType' => 'varchar',
            'link' => 'accounts',
            'len' => '255',
            'source' => 'non-db',
            'unified_search' => true,
        ),

        'account_id' => array (
            'name' => 'account_id',
            'vname' => 'LBL_ACCOUNT_ID',
            'type' => 'id',
            'audited' => true,
            'importable' => 'required',
            'reportable' => false,
            'comment' => 'The account ID to which the contract is associated'
        ),
        'accounts' => array (
            'name' => 'accounts',
            'type' => 'link',
            'relationship' => 'account_contracts',
            'source' => 'non-db',
            'link_type' => 'one',
            'module' => 'Accounts',
            'bean_name' => 'Account',
            'vname' => 'LBL_ACCOUNTS',
        ),
        'start_date' => array (
            'name' => 'start_date',
            'vname' => 'LBL_START_DATE',
            'type' => 'date',
            'validation' => array('type' => 'isbefore', 'compareto' => 'end_date', 'blank' => true),
            'audited' => true,
            'comment' => 'The effective date of the contract',
            'enable_range_search' => true,
            'options' => 'date_range_search_dom',
        ),
        'end_date' => array (
            'name' => 'end_date',
            'vname' => 'LBL_END_DATE',
            'type' => 'date',
            'audited' => true,
            'comment' => 'The date in which the contract is no longer effective',
            'enable_range_search' => true,
            'options' => 'date_range_search_dom',
        ),

        'currency_id' => array (
            'name' => 'currency_id',
            'type' => 'currency_id',
            'dbType' => 'id',
            'vname'=>'LBL_CURRENCY_ID',
            'group'=>'currency_id',
            'function'=>array('name'=>'getCurrencyDropDown', 'returns'=>'html'),
            'required'=>false,
            'reportable'=>false,
            'default'=>'-99',
            'comment' => 'The currency in use for the contract'
        ),
        //BTCI - Field
        'contract_number' => array (
            'required' => false,
            'name' => 'contract_number',
            'vname' => 'LBL_CONTRACT_NUMBER',
            'type' => 'varchar',
            'massupdate' => 0,
            'no_default' => false,
            'comments' => '',
            'help' => '',
            'importable' => 'true',
            'duplicate_merge' => 'disabled',
            'duplicate_merge_dom_value' => '0',
            'audited' => false,
            'reportable' => true,
            'unified_search' => false,
            'merge_filter' => 'disabled',
            'calculated' => false,
            'len' => '100',
            'size' => '20',
        ),
        'vat_percent' =>
        array (
            'required' => false,
            'name' => 'vat_percent',
            'vname' => 'LBL_VAT_PERCENT',
            'type' => 'decimal',
            'len' => '5',
            'precision' => '2',
            'size' => 5,
            'default' => '0',
        ),
        'number_of_student' =>
        array (
            'required' => true,
            'name' => 'number_of_student',
            'vname' => 'LBL_NUMBER_OF_STUDENT',
            'type' => 'int',
            'len' => '5',
        ),

        'duration_hour' =>
        array (
            'required' => true,
            'name' => 'duration_hour',
            'vname' => 'LBL_DURATION_HOUR',
            'type' => 'decimal',
            'len' => '13',
            'precision' => '2',
            'size' => 5,
        ),
        'duration_session' =>
        array (
            'required' => true,
            'name' => 'duration_session',
            'vname' => 'LBL_DURATION_SESSION',
            'type' => 'decimal',
            'len' => '13',
            'precision' => '2',
            'size' => 5,
        ),

        'deadline_date' => array (
            'name' => 'deadline_date',
            'vname' => 'LBL_DEADLINE_DATE',
            'type' => 'date',
            'audited' => true,
            'comment' => '',
            'enable_range_search' => true,
            'options' => 'date_range_search_dom',
        ),
        'number_of_payment' => array(
            'name' => 'number_of_payment',
            'vname' => 'LBL_NUMBER_OF_PAYMENT',
            'type' => 'enum',
            'len' => 10,
            'size' => '20',
            'options' => 'number_of_payment_contract_list',
        ),

        //END: BTIC Field

        'currency_name' => array (
            'name' => 'currency_name',
            'type' => 'enum',
            'vname'=>'LBL_CURRENCY',
            'function'=>'getCurrencyDropDown',
            'source' => 'non-db',
            'studio' => 'false',
            'comment' => 'Currency name used for Meta-data framework',
        ),
        'amount_per_student' => array (
            'required' => true,
            'name' => 'amount_per_student',
            'vname' => 'LBL_AMOUNT_PER_STUDENT',
            'dbType' => 'decimal',
            'type' => 'currency',
            'len' => '13,2',
            'comment' => 'The overall value of the contract'
        ),
        'remain_amount' => array (
            'required' => true,
            'name' => 'remain_amount',
            'vname' => 'LBL_REMAIN_AMOUNT',
            'dbType' => 'decimal',
            'type' => 'currency',
            'len' => '13,2',
            'comment' => ''
        ),
        'total_student' =>
        array (
            'required' => true,
            'name' => 'total_student',
            'vname' => 'LBL_TOTAL_STUDENT',
            'type' => 'int',
            'len' => '5',
        ),
        'total_contract_value' => array (
            'required' => true,
            'name' => 'total_contract_value',
            'vname' => 'LBL_TOTAL_CONTRACT_VALUE',
            'dbType' => 'decimal',
            'type' => 'currency',
            'len' => '26,2',
            'comment' => 'The overall value of the contract'
        ),
        'total_contract_value_usdollar' => array (
            'name' => 'total_contract_value_usdollar',
            'vname' => 'LBL_TOTAL_CONTRACT_VALUE_USDOLLAR',
            'dbType' => 'decimal',
            'type' => 'currency',
            'len' => '26,2',
            'comment' => 'The overall contract value expressed in USD',
            'studio' => array(
                'wirelesslistview'=>false,
                'wirelesseditview'=>false,
                'wirelessdetailview'=>false,
            ),
        ),
        'status' => array (
            'name' => 'status',
            'vname' => 'LBL_STATUS',
            'type' => 'enum',
            'len' => 100,
            'required' => true,
            'options' => 'contract_status_dom',
            'audited' => true,
            'comment' => 'The contract status',
            'importable' => 'required',
        ),
        'customer_signed_date' => array (
            'required' => true,
            'name' => 'customer_signed_date',
            'vname' => 'LBL_CUSTOMER_SIGNED_DATE',
            'type' => 'date',
            'comment' => 'Date in which the ultimate customer signed the contract',
            'enable_range_search' => true,
            'options' => 'date_range_search_dom',
            'display_default' => 'now',
        ),
        'company_signed_date' => array (
            'name' => 'company_signed_date',
            'vname' => 'LBL_COMPANY_SIGNED_DATE',
            'type' => 'date',
            'comment' => 'Date in which the company using Sugar signed the contract',
            'enable_range_search' => true,
            'options' => 'date_range_search_dom',
        ),
        'contract_term' => array (
            'name' => 'contract_term',
            'vname' => 'LBL_CONTRACT_TERM',
            'type' => 'int',
            'len' => 5,
            'source' => 'non-db',
        ),
        'expiration_notice' => array (
            'name' => 'expiration_notice',
            'vname' => 'LBL_EXPIRATION_NOTICE',
            'type' => 'datetimecombo',
            'reportable' => false,
            'massupdate' => false,
            'comment' => 'Date to issue an expiration notice (useful for workflow rules)'
        ),
        'time_to_expiry' => array (
            'name' => 'time_to_expiry',
            'vname' => 'LBL_TIME_TO_EXPIRY',
            'type' => 'int',
            'len' => 5,
            'source' => 'non-db',
        ),
        'type_name' => array (
            'name' => 'type_name',
            'vname' => 'LBL_TYPE',
            'rname' => 'name',
            'id_name' => 'type',
            'type' => 'relate',
            'studio' => 'false', //C.L. - Use type, not type_name; the QuickSearch is not implemented for type_name
            'table' => 'contract_types',
            'module' => 'ContractTypes',
            'len' => '36',
            'reportable' => false,
            'source'=>'non-db',
            'link' => 'contract_types',
            'comment' => 'The contract type'
        ),
        'contact_name' =>
        array (
            'name' => 'contact_name',
            'vname' => 'LBL_CONTACT_NAME',
            'type' => 'varchar',
            'len' => 200,
            'comment' => 'Contact name',
        ),
        'contract_types' => array (
            'name' => 'contract_types',
            'type' => 'link',
            'vname' => 'LBL_TYPE',
            'relationship' => 'contracts_contract_types',
            'link_type' => 'one',
            'source' => 'non-db',
        ),
        'type' => array (
            'name' => 'type',
            'vname' => 'LBL_TYPE',
            'type' => 'enum',
            'function' => 'getContractTypesDropDown',
            'merge_filter' => 'enabled',
            'duplicate_merge' => 'disabled',
            'comment' => 'The dropdown options for Contract types',
        ),
        'contracts_documents' =>	array (
            'name' => 'contracts_documents',
            'type' => 'link',
            'relationship' => 'contracts_documents',
            'source' => 'non-db',
            'vname' => 'LBL_DOCUMENTS',
        ),
        'parent_name' =>
        array (
            'name' => 'parent_name',
            'vname' => 'LBL_MEMBER_OF',
            'id_name' => 'parent_id',
            'type' => 'relate',
            'required'=>false,
            'reportable'=>false,
            'audited'=>true,
            'source'=>'non-db',
            'comment' => 'parent_name of contract, added to prevent ability to add flex relate field to module because of relationship in linked_documentsMetaData.php',
        ),
        'contacts' =>	array (
            'name' => 'contacts',
            'type' => 'link',
            'relationship' => 'contracts_contacts',
            'source' => 'non-db',
            'vname' => 'LBL_CONTACTS',
        ),
        'notes' =>	array (
            'name' => 'notes',
            'type' => 'link',
            'relationship' => 'contract_notes',
            'source' => 'non-db',
            'vname' => 'LBL_NOTES',
        ),
        // Relationship Contract ( 1 - n ) Payment
        'payment_link' =>
        array (
            'name' => 'payment_link',
            'type' => 'link',
            'relationship' => 'contract_j_payment',
            'module' => 'J_Payment',
            'bean_name' => 'J_Payment',
            'source' => 'non-db',
            'vname' => 'LBL_PAYMENT',
        ),

        //Relationship  Contract ( 1 - n ) Payment Detail
        'paymentdetail_link'=>array(
            'name' => 'paymentdetail_link',
            'type' => 'link',
            'relationship' => 'contract_paymentdetails',
            'module' => 'J_PaymentDetail',
            'bean_name' => 'J_PaymentDetail',
            'source' => 'non-db',
            'vname' => 'LBL_PAYMENT_DETAIL',
        ),
    ),
    'relationships' => array(
        //Relationship  Contract ( 1 - n ) Payment Detail
        'contract_paymentdetails' => array(
            'lhs_module' => 'Contracts',
            'lhs_table' => 'contracts',
            'lhs_key' => 'id',
            'rhs_module' => 'J_PaymentDetail',
            'rhs_table' => 'j_paymentdetail',
            'rhs_key' => 'contract_id',
            'relationship_type' => 'one-to-many'
        ),
        'contract_paymentdetails' => array(
            'lhs_module' => 'Contracts',
            'lhs_table' => 'contracts',
            'lhs_key' => 'id',
            'rhs_module' => 'J_PaymentDetail',
            'rhs_table' => 'j_paymentdetail',
            'rhs_key' => 'contract_id',
            'relationship_type' => 'one-to-many'
        ),
        //Add Relationship Contract ( 1 - n ) Payment
        'contract_j_payment' => array(
            'lhs_module'        => 'Contracts',
            'lhs_table'            => 'contracts',
            'lhs_key'            => 'id',
            'rhs_module'        => 'J_Payment',
            'rhs_table'            => 'j_payment',
            'rhs_key'            => 'contract_id',
            'relationship_type'    => 'one-to-many',
        ),


        'contracts_contract_types' => array(
            'lhs_module' => 'Contracts',
            'lhs_table' => 'contracts',
            'lhs_key' => 'type',
            'rhs_module' => 'ContractTypes',
            'rhs_table' => 'contract_types',
            'rhs_key' => 'id',
            'relationship_type' => 'one-to-many',
        ),
        'contract_notes' => array(
            'lhs_module' => 'Contracts',
            'lhs_table' => 'contracts',
            'lhs_key' => 'id',
            'rhs_module' => 'Notes',
            'rhs_table' => 'notes',
            'rhs_key' => 'parent_id',
            'relationship_role_column' => 'parent_type',
            'relationship_role_column_value' => 'Contracts',
            'relationship_type' => 'one-to-many',
        ),
        'account_contracts' => array(
            'lhs_module' => 'Accounts',
            'lhs_table' => 'accounts',
            'lhs_key' => 'id',
            'rhs_module' => 'Contracts',
            'rhs_table' => 'contracts',
            'rhs_key' => 'account_id',
            'relationship_type' => 'one-to-many',
        ),
        'contracts_assigned_user' => array(
            'lhs_module' => 'Users',
            'lhs_table' => 'users',
            'lhs_key' => 'id',
            'rhs_module' => 'Contracts',
            'rhs_table' => 'contracts',
            'rhs_key' => 'assigned_user_id',
            'relationship_type' => 'one-to-many',
        ),
        'contracts_created_by' => array(
            'lhs_module' => 'Users',
            'lhs_table' => 'users',
            'lhs_key' => 'id',
            'rhs_module' => 'Contracts',
            'rhs_table' => 'contracts',
            'rhs_key' => 'created_by',
            'relationship_type' => 'one-to-many',
        ),
        'contracts_modified_user' => array(
            'lhs_module' => 'Users',
            'lhs_table' => 'users',
            'lhs_key' => 'id',
            'rhs_module' => 'Contracts',
            'rhs_table' => 'contracts',
            'rhs_key' => 'modified_user_id',
            'relationship_type' => 'one-to-many',
        ),
    ),
);
VardefManager::createVardef('Contracts','Contract', array('default', 'assignable',
    'team_security',
));
?>
